"use strict";
const _ = require("lodash");
const dateFormat = require("dateformat");
const fs = require("fs");
const path = require("path");
const stackTrace = require("stack-trace");
const winston = require("winston");
let config = {
    'default': 'info'
};
const mkLogConfig = (label, level) => {
    return {
        level: level,
        transports: [
            new (winston.transports.Console)({
                colorize: true,
                label: label,
                timestamp: () => {
                    var now = new Date();
                    return dateFormat(now, 'HH:MM:ss.l');
                }
            })
        ]
    };
};
const logger = addLogger('LOG_FACTORY');
const setConfig = (cfg) => {
    config = _.merge({}, config, cfg);
    _.forIn(cfg, (value, key) => {
        addLogger(key, value);
    });
};
const isLogLevel = (l) => _.includes(['error', 'warn', 'info', 'verbose', 'debug', 'silly'], l);
exports.setDefaultLevel = (l) => {
    config = _.merge(config, { 'default': l });
    logger.debug('default level now: ', config['default']);
    _.forEach(winston.loggers.loggers, (value, key) => {
        let logger = winston.loggers.get(key);
        let cfg = mkLogConfig(key, config['default']);
        logger.configure(cfg);
    });
};
exports.init = (log) => {
    logger.debug('init: ', log);
    if (!log) {
        return;
    }
    if (_.isObject(log)) {
        setConfig(log);
    }
    else if (isLogLevel(log)) {
        exports.setDefaultLevel(log);
    }
    else {
        try {
            let config = JSON.parse(log);
            logger.debug('parsed log: ', log);
            setConfig(config);
        }
        catch (e) {
            if (fs.existsSync(log)) {
                var cfg = JSON.parse(fs.readFileSync(log, 'utf8'));
                setConfig(cfg);
            }
            else {
                console.error('can not configure logging using cli param value: ' + log);
            }
        }
    }
};
function addLogger(label, level) {
    level = level ? level : config['default'] || 'info';
    let cfg = mkLogConfig(label, level);
    let logger;
    if (winston.loggers.has(label)) {
        logger = winston.loggers.get(label);
    }
    else {
        logger = winston.loggers.add(label, {});
    }
    logger.configure(cfg);
    return logger;
}
exports.getLogger = (id) => {
    var existing = winston.loggers.has(id);
    if (existing) {
        return winston.loggers.get(id);
    }
    else {
        return addLogger(id, config[id] || config['default']);
    }
};
exports.fileLogger = (filename) => {
    var label;
    var parsed = path.parse(filename);
    if (parsed.name === 'index') {
        label = path.basename(parsed.dir);
    }
    else {
        label = parsed.name;
    }
    return exports.getLogger(label);
};
function buildLogger() {
    let trace = stackTrace.get();
    let name = trace[1].getFileName();
    return exports.fileLogger(name);
}
exports.buildLogger = buildLogger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLGtCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUpELGtDQUlDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICogYXMgZGF0ZUZvcm1hdCBmcm9tICdkYXRlZm9ybWF0JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBzdGFja1RyYWNlIGZyb20gJ3N0YWNrLXRyYWNlJztcbmltcG9ydCAqIGFzIHdpbnN0b24gZnJvbSAnd2luc3Rvbic7XG5cbi8vbGV2ZWxzOiBlcnJvciA+IHdhcm4gPiBpbmZvID4gdmVyYm9zZSA+IGRlYnVnID4gc2lsbHlcblxubGV0IGNvbmZpZyA9IHtcbiAgJ2RlZmF1bHQnOiAnaW5mbydcbn07XG5cbmNvbnN0IG1rTG9nQ29uZmlnID0gKGxhYmVsOiBzdHJpbmcsIGxldmVsOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsZXZlbDogbGV2ZWwsXG4gICAgdHJhbnNwb3J0czogW1xuICAgICAgbmV3ICh3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSkoe1xuICAgICAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICB0aW1lc3RhbXA6ICgpID0+IHtcbiAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZvcm1hdChub3csICdISDpNTTpzcy5sJyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgXVxuICB9O1xufTtcblxuY29uc3QgbG9nZ2VyID0gYWRkTG9nZ2VyKCdMT0dfRkFDVE9SWScpO1xuXG5jb25zdCBzZXRDb25maWcgPSAoY2ZnKSA9PiB7XG4gIGNvbmZpZyA9IF8ubWVyZ2Uoe30sIGNvbmZpZywgY2ZnKTtcbiAgXy5mb3JJbihjZmcsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgYWRkTG9nZ2VyKGtleSwgdmFsdWUpO1xuICB9KTtcbn07XG5cbmNvbnN0IGlzTG9nTGV2ZWwgPSAobCk6IEJvb2xlYW4gPT4gXy5pbmNsdWRlcyhbJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICd2ZXJib3NlJywgJ2RlYnVnJywgJ3NpbGx5J10sIGwpO1xuXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdExldmVsID0gKGwpID0+IHtcbiAgY29uZmlnID0gXy5tZXJnZShjb25maWcsIHsgJ2RlZmF1bHQnOiBsIH0pO1xuICBsb2dnZXIuZGVidWcoJ2RlZmF1bHQgbGV2ZWwgbm93OiAnLCBjb25maWdbJ2RlZmF1bHQnXSk7XG4gIF8uZm9yRWFjaCh3aW5zdG9uLmxvZ2dlcnMubG9nZ2VycywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICBsZXQgbG9nZ2VyID0gd2luc3Rvbi5sb2dnZXJzLmdldChrZXkpO1xuICAgIGxldCBjZmcgPSBta0xvZ0NvbmZpZyhrZXksIGNvbmZpZ1snZGVmYXVsdCddKTtcbiAgICBsb2dnZXIuY29uZmlndXJlKGNmZyk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGluaXQgPSAobG9nKTogdm9pZCA9PiB7XG5cbiAgbG9nZ2VyLmRlYnVnKCdpbml0OiAnLCBsb2cpO1xuXG4gIGlmICghbG9nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKF8uaXNPYmplY3QobG9nKSkge1xuICAgIHNldENvbmZpZyhsb2cpO1xuICB9IGVsc2UgaWYgKGlzTG9nTGV2ZWwobG9nKSkge1xuICAgIHNldERlZmF1bHRMZXZlbChsb2cpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShsb2cpO1xuICAgICAgbG9nZ2VyLmRlYnVnKCdwYXJzZWQgbG9nOiAnLCBsb2cpO1xuICAgICAgc2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMobG9nKSkge1xuICAgICAgICB2YXIgY2ZnID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMobG9nLCAndXRmOCcpKTtcbiAgICAgICAgc2V0Q29uZmlnKGNmZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdjYW4gbm90IGNvbmZpZ3VyZSBsb2dnaW5nIHVzaW5nIGNsaSBwYXJhbSB2YWx1ZTogJyArIGxvZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGFkZExvZ2dlcihsYWJlbCwgbGV2ZWw/OiBzdHJpbmcpOiB3aW5zdG9uLkxvZ2dlckluc3RhbmNlIHtcbiAgbGV2ZWwgPSBsZXZlbCA/IGxldmVsIDogY29uZmlnWydkZWZhdWx0J10gfHwgJ2luZm8nO1xuICBsZXQgY2ZnID0gbWtMb2dDb25maWcobGFiZWwsIGxldmVsKTtcbiAgbGV0IGxvZ2dlcjtcbiAgaWYgKHdpbnN0b24ubG9nZ2Vycy5oYXMobGFiZWwpKSB7XG4gICAgbG9nZ2VyID0gd2luc3Rvbi5sb2dnZXJzLmdldChsYWJlbCk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyID0gd2luc3Rvbi5sb2dnZXJzLmFkZChsYWJlbCwge30pO1xuICB9XG5cbiAgbG9nZ2VyLmNvbmZpZ3VyZShjZmcpO1xuICByZXR1cm4gbG9nZ2VyO1xufVxuXG4vKiogZ2V0IGEgbG9nZ2VyIGFuZCBnaXZlIGl0IGEgbmFtZSAqL1xuZXhwb3J0IGNvbnN0IGdldExvZ2dlciA9IChpZDogc3RyaW5nKTogd2luc3Rvbi5Mb2dnZXJJbnN0YW5jZSA9PiB7XG4gIHZhciBleGlzdGluZyA9IHdpbnN0b24ubG9nZ2Vycy5oYXMoaWQpO1xuXG4gIGlmIChleGlzdGluZykge1xuICAgIHJldHVybiB3aW5zdG9uLmxvZ2dlcnMuZ2V0KGlkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWRkTG9nZ2VyKGlkLCBjb25maWdbaWRdIHx8IGNvbmZpZ1snZGVmYXVsdCddKTtcbiAgfVxufTtcblxuLyoqIGdldCBhIGxvZ2dlciBhbmQgbmFtZSBpdCBieSBpdCdzIGZpbGUgbmFtZS4gKi9cbmV4cG9ydCBjb25zdCBmaWxlTG9nZ2VyID0gKGZpbGVuYW1lKTogd2luc3Rvbi5Mb2dnZXJJbnN0YW5jZSA9PiB7XG4gIHZhciBsYWJlbDtcbiAgdmFyIHBhcnNlZCA9IHBhdGgucGFyc2UoZmlsZW5hbWUpO1xuXG4gIGlmIChwYXJzZWQubmFtZSA9PT0gJ2luZGV4Jykge1xuICAgIGxhYmVsID0gcGF0aC5iYXNlbmFtZShwYXJzZWQuZGlyKTtcbiAgfSBlbHNlIHtcbiAgICBsYWJlbCA9IHBhcnNlZC5uYW1lO1xuICB9XG4gIHJldHVybiBnZXRMb2dnZXIobGFiZWwpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBsb2dnZXIgYW5kIGF1dG9tYXRpY2FsbHkgbmFtZSBpdCBieSB1c2luZyB0aGUgZmlsZW5hbWUgb2YgdGhlIGNhbGwgc2l0ZS5cbiAqIEVnOlxuICogYGBgXG4gKiAvL215LWZpbGUuanNcbiAqIGltcG9ydCB7YnVpbGRMb2dnZXJ9IGZyb20gJ2xvZy1mYWN0b3J5JztcbiAqIGxldCBsb2dnZXIgPSBidWlsZExvZ2dlcigpO1xuICogbG9nZ2VyLmluZm8oJ2hpJykgLy89PiBlbWl0cyBbSU5GT10gW215LWZpbGVdIGhpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTG9nZ2VyKCk6IHdpbnN0b24uTG9nZ2VySW5zdGFuY2Uge1xuICBsZXQgdHJhY2UgPSBzdGFja1RyYWNlLmdldCgpO1xuICBsZXQgbmFtZSA9IHRyYWNlWzFdLmdldEZpbGVOYW1lKCk7XG4gIHJldHVybiBmaWxlTG9nZ2VyKG5hbWUpO1xufVxuIl19
